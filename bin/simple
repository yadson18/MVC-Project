#!/bin/bash
# yadson20@gmail.com
#

ROOT=$(pwd);

TEMPLATES_PATH=$ROOT/vendor/Simple/Mclasses/Templates;

SRC_PATH=$ROOT/src;

CONTROLLER_PATH=$SRC_PATH/Controller;

MODEL_PATH=$SRC_PATH/Model;

VIEW_PATH=$SRC_PATH/View;

WEBROOT_PATH=$ROOT/webroot;

function getClassName(){ 
	# $1 - Class name.

	if [ $# -eq 1 ]; then
		className=$(echo "$1" | sed -r 's/\b(\w)(\w*)\b/\U\1\L\2/g');
		
		if [ $? -ne 1 ]; then
			echo $className;
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function makeClassController(){
	# $1 - Table name.
	
	if [ $# -eq 1 ]; then
		className=$(getClassName $1);

		if [ "$className" != 0 ]; then
			controller=$(sed -r "s/%controller_name%/$className/g" $TEMPLATES_PATH/Controller.php > $CONTROLLER_PATH/$className'Controller.php');

			if [ $? -ne 1 ]; then
				echo 1;
			else
				echo 0;
			fi
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function makeClassEntity(){
	# $1 - Table name.

	className=$(getClassName $1);

	if [ $# -eq 1 ]; then
		if [ $className != 0 ]; then 
			entity=$(sed -r "s/%entity_name%/$className/g" $TEMPLATES_PATH/Entity.php > $MODEL_PATH/Entity/$className'.php');

			if [ $? -ne 1 ]; then
				echo 1;
			else
				echo 0;
			fi
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function makeClassTable(){
	# $1 - Table name.
	# $2 - Table attributes.
	# $3 - Database type.
	# $4 - Database name.
	# $5 - Primary key.

	if [ $# -eq 5 ]; then
		className=$(getClassName $1);

		if [ $className != 0 ]; then 
			table=$(sed -e "s/%table_name%/$className/g" -e "s/%table_attributes%/$2/g" -e "s/%db_type%/$3/g" -e "s/%db_name%/$4/g" -e "s/%table%/$1/g" -e "s/%primary_key%/$5/g" $TEMPLATES_PATH/Table.php > $MODEL_PATH/TableClass/$className'Table.php');
			
			if [ $? -ne 1 ]; then
				echo 1;
			else
				echo 0;
			fi
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function makeViewDir(){
	# $1 - Table name.

	if [ $# -eq 1 ]; then
		cd $VIEW_PATH;
		dirName=$(getClassName $1);
		
		if [ "$dirName" != 0 ]; then 
			
			if [ -e $dirName ]; then
				echo 0;
			else
				mkdir $dirName;

				if [ "$dirName" != 0 ]; then
					echo 1;
				else
					echo 0;
				fi
			fi
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function findFile(){
	# $1 - File name on path bin.

	if [ $# -eq 1 ]; then
		if [ -e $ROOT/bin/$1 ]; then
			echo 1;
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function setFileTableName(){
	# $1 - Table name.
	# $2 - File name.

	if [ $# -eq 2 ]; then
		fileExists=$(findFile $2);

		if [ $fileExists -eq 1 ]; then
			verifyChange=$(sed -i "s/=.*ORDER/= '$1' ORDER/g" bin/$2);

			if [ $? -ne 1 ]; then
				echo 1;
			else
				echo 0;
			fi
		else
			echo 0;
		fi
	else
		echo 0;	
	fi
}

function getTablePrimaryKey(){
	# $1 - Database name.
	# $2 - Temporary file name.

	if [ $# -eq 2 ]; then
		queryResult=$(/opt/firebird/bin/isql "localhost:/BD/$1.FDB" -ch 'UTF-8' -i 'bin/.classInitialize.sql' -o $2 -u SYSDBA -p masterkey -page 1000000);
	
		if [ $? -ne 1 ]; then
			sed -i -e "s/=//g" -e "s/[[:space:]]\+/|/g" -e "s/|$//" -e "/^$/d" -e "s/PK//g" $2;
			result=$(cat $2);

			if [ "$result" != "" ]; then
				echo 1;
			else
				echo 0;
			fi
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function getTableAttributes(){
	# $1 - Database name.
	# $2 - Temporary file name.

	if [ $# -eq 2 ]; then
		queryResult=$(/opt/firebird/bin/isql "localhost:/BD/$1.FDB" -ch 'UTF-8' -i 'bin/.classAttributes.sql' -o $2 -u SYSDBA -p masterkey -page 1000000);

		if [ $? -ne 1 ]; then
			sed -i -e "s/=//g" -e "s/[[:space:]]\+/|/g" -e "s/|$//" -e "s/COLUMNS.*\|=//g" $2;
			result=$(cat $2);

			if [ "$result" != "" ]; then
				echo 1;
			else
				echo 0;
			fi
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function getFileContents(){
	# $1 - First file name.
	# $2 - Second file name.

	if [ $# -eq 2 ]; then
		newFile=$(mktemp);

		cat $1 >> $newFile;
		cat $2 >> $newFile;

		cat $newFile;
	else
		echo 0;
	fi
}

function getTableClassAttributeLine(){
	# $1 - File attribute line.

	if [ $# -eq 1 ]; then
		IFS='|';
		array=($1);
		for key in "${!array[@]}"; do
			if [ ${#array[@]} -eq 4 ]; then
				if [ $key -eq 0 ]; then
					echo "\t\t\t'${array[$key]}' => [";
				elif [ $key -eq 1 ]; then
					echo "'null' => '${array[$key]}',";
				elif [ $key -eq 2 ]; then
					echo "'size' => ${array[$key]},";
				elif [ $key -eq 3 ]; then
					echo "'type' => '${array[$key]}' ],\n";
				fi
			fi
		done
	else
		echo 0;
	fi
}

function getTableClassPrimaryKey(){
	# $1 - File attribute line.

	if [ $# -eq 1 ]; then
		IFS='|';
		array=($1);
		
		for key in "${!array[@]}"; do
			if [ ${#array[@]} -ne 4 ]; then
				echo "${array[$key]}";
				break;
			fi
		done
	fi
}

if [ $# -eq 1 ] && [ "$1" == start ]; then
	cd $WEBROOT_PATH;
   	php -S localhost:9000

elif [ $# -eq 3 ] && [ "$1" == mclasses ] && [ "$2" != "" ] && [ "$3" != "" ]; then
	primaryKeyFile=$(mktemp);
	attributesFile=$(mktemp);

	databaseName=$2;
	tableName=$3;
	
	changeTableName=$(setFileTableName $tableName .classInitialize.sql);
	
	if [ $changeTableName -eq 1 ]; then
		changeTableName=$(setFileTableName $tableName .classAttributes.sql);
		
		if [ $changeTableName -eq 1 ]; then
			primaryKeyExists=$(getTablePrimaryKey $databaseName $primaryKeyFile);
			
			if [ $primaryKeyExists -eq 1 ]; then
				attributesExists=$(getTableAttributes $databaseName $attributesFile);

				if [ $attributesExists -eq 1 ]; then
					attributes="";
					primaryKey="";

					result=$(getFileContents $primaryKeyFile $attributesFile);

					for line in `echo $result`; do
						 if [ "$primaryKey" == "" ]; then
						 	primaryKey=$(getTableClassPrimaryKey $line);
						 fi
						attributes="$attributes$(getTableClassAttributeLine $line)";
					done

					attributes=$(echo $attributes | sed 's/...$//');

					ControllerClass=$(makeClassController $tableName);
					TableClass=$(makeClassTable $tableName  "\n$attributes" firebird $databaseName $primaryKey);
					EntityClass=$(makeClassEntity $tableName);
					ViewDirectoryClass=$(makeViewDir $tableName);
					
					if [ "$ControllerClass" -eq 1 ]; then 
						if [ "$TableClass" -eq 1 ]; then
							if [ "$EntityClass" -eq 1 ]; then
								if [ "$ViewDirectoryClass" -eq 1 ]; then
									echo "ok";
								fi
							fi
						fi
					fi
				fi
			fi
		fi
	fi
else
	echo "Não foi possível executar esta ação.";
fi
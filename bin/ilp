#!/bin/bash
# yadson20@gmail.com
#

ROOT=$(pwd);

function getClassName(){ 
	# $1 - Nome da tabela.

	className=$(echo "$1" | sed -r 's/\b(\w)(\w*)\b/\U\1\L\2/g');
	
	if [ $? -ne 1 ]; then
		echo $className;
	else
		echo 0;
	fi
}

function findFile(){
	# $1 - Nome do arquivo na pasta bin

	if [ -e $ROOT/bin/$1 ]; then
		echo 1;
	else
		echo 0;
	fi
}

function setFileTableName(){
	# $1 - Nome da tabela.
	# $2 - Nome do arquivo.

	fileExists=$(findFile $2);

	if [ $fileExists -eq 1 ]; then
		verifyChange=$(sed -i "s/=.*ORDER/= '$1' ORDER/g" bin/$2);

		if [ $? -ne 1 ]; then
			echo 1;
		else
			echo 0;
		fi
	else
		echo 0;
	fi	
}

function getTablePrimaryKey(){
	# $1 - Nome da base de dados.
	# $2 - Nome do arquivo temporário.

	queryResult=$(/opt/firebird/bin/isql "localhost:/BD/$1.FDB" -ch 'UTF-8' -i 'bin/.classInitialize.sql' -o $2 -u SYSDBA -p masterkey -page 1000000);

	if [ $? -ne 1 ]; then
		sed -i 's/=//g' $2;
		sed -i 's/[[:space:]]\+/|/g' $2;
		sed -i 's/|$//' $2;
		sed -i '/^$/d' $2;
		sed -i -e '1d' $2;

		if [ $? -ne 1 ]; then
			echo 1;
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function getTableAttributes(){
	# $1 - Nome da base de dados.
	# $2 - Nome do arquivo temporário.

	queryResult=$(/opt/firebird/bin/isql "localhost:/BD/$1.FDB" -ch 'UTF-8' -i 'bin/.classAttributes.sql' -o $2 -u SYSDBA -p masterkey -page 1000000);

	if [ $? -ne 1 ]; then
		sed -i 's/=//g' $2;
		sed -i 's/[[:space:]]\+/|/g' $2;
		sed -i 's/|$//' $2;
		sed -i '/^$/d' $2;
		sed -i -e '1d' $2;

		if [ $? -ne 1 ]; then
			echo 1;
		else
			echo 0;
		fi
	else
		echo 0;
	fi
}

function getFileContents(){
	# $1 - Nome do primeiro arquivo.
	# $2 - Nome do segundo arquivo.

	newFile=$(mktemp);

	cat $1 >> $newFile;
	cat $2 >> $newFile;

	cat $newFile;
}

function createClassDir(){
	# $1 - Nome do diretório.

	cd $ROOT/src/View;
	if [ -e $1 ]; then
		echo 0;
	else
		mkdir $1;
		echo 1;
	fi
}

function createEntityClass(){
	# $1 - Nome da classe.

	entityClass="
		<?php\n
			\tclass $1 extends Entity{\n
				\t\n
			\t}
	";
	
	echo $entityClass;
}

function createControllerClass(){
	# $1 - Nome da classe.

	controllerClass="
		<?php\n  
			\tclass $1Controller extends AppController{\n
				\t\tpublic function __construct(\$requestData){\n
						\t\t\tparent::initialize(\$requestData);\n
				\t\t}\n\n

				\t\tpublic function isAuthorized(string \$method){\n
					\t\t\treturn \$this->notAlowed(\$method, []);\n
				\t\t}\n
			\t}
	";

	echo $controllerClass;
}

function createTableClass(){
	# $1 - Nome da classe.
	# $2 - Nome da base de dados.
	# $3 - Nome da tabela.
	# $4 - Chave primária da tabela.
	# $5 - Atributos da classe.

	tableClass="
		<?php\n
			\tclass $1Table extends Table{\n
				\t\tprivate \$attributes = [\n
					$5\n
				\t\t];\n\n
				\t\tpublic function initialize(){\n
					\t\t\tparent::database('firebird', '$2');\n\n

					\t\t\t\$this->table('$3');\n
					\t\t\t\$this->primaryKey('$4');\n
					\t\t\t\$this->belongsTo([]);\n
				\t\t}\n
			\t}
	";

	echo $tableClass;
}

function getTableClassAttributeLine(){
	# $1 - Linha de atributo do arquivo.

	IFS='|';
	array=($1);
	for key in "${!array[@]}"; do
		if [ ${#array[@]} -eq 4 ]; then
			if [ $key -eq 0 ]; then
				echo "\t\t\t'${array[$key]}' => [";
			elif [ $key -eq 1 ]; then
				echo "'null' => '${array[$key]}',";
			elif [ $key -eq 2 ]; then
				echo "'size' => ${array[$key]},";
			elif [ $key -eq 3 ]; then
				echo "'type' => '${array[$key]}' ],\n";
			fi
		fi
	done
}

function getTableClassPrimaryKey(){
	# $1 - Linha de atributo do arquivo.

	IFS='|';
	array=($1);
	for key in "${!array[@]}"; do
		if [ ${#array[@]} -ne 4 ]; then
			echo "${array[$key]}";
			break;
		fi
	done
}

#result=$(createTableClass Cadastro FIREBIRD CADASTRO, cod_cadastro);
#echo -e $result > bin/test.php;

if [ $# -eq 1 ] && [ $1 == start ]; then
   	dir=$(pwd; cd ..); 
   	cd $dir/webroot;

   	php -S localhost:9000

elif [ $# -eq 3 ] && [ $1 == createmvc ] && [ $2 != "" ] && [ $3 != "" ]; then
	primaryKeyFile=$(mktemp);
	attributesFile=$(mktemp);
	databaseName=$2;
	tableName=$3;
	className=$(getClassName $tableName);
	
	changeTableName=$(setFileTableName $tableName .classInitialize.sql);
	
	if [ $changeTableName -eq 1 ]; then
		changeTableName=$(setFileTableName $tableName .classAttributes.sql);
		
		if [ $changeTableName -eq 1 ]; then
			primaryKeyExists=$(getTablePrimaryKey $databaseName $primaryKeyFile);

			if [ $primaryKeyExists -eq 1 ]; then
				attributesExists=$(getTableAttributes $databaseName $attributesFile);

				if [ $attributesExists -eq 1 ]; then
					attributes="";
					primaryKey=0;

					result=$(getFileContents $primaryKeyFile $attributesFile);
					for line in `echo $result`; do
						if [ $primaryKey == 0 ]; then
							primaryKey=$(getTableClassPrimaryKey $line);
						fi
						attributes="$attributes$(getTableClassAttributeLine $line)";
					done
					attributes=$(echo $attributes | sed 's/...$//');

					TableClass=$(createTableClass $className $databaseName $tableName, $primaryKey "$attributes");
					EntityClass=$(createEntityClass $className);
					ControllerClass=$(createControllerClass $className);
					ViewDirectoryClass=$(createClassDir $className);

					if [ $ViewDirectoryClass -eq 1 ]; then
						echo -e $TableClass > $ROOT/src/Model/Tables/$className"Table".php;
						echo -e $EntityClass > $ROOT/src/Model/Entity/$className.php;
						echo -e $ControllerClass > $ROOT/src/Controller/$className"Controller".php;
					fi
				fi
			fi
		fi
	fi
else
	echo "Não foi possível executar esta ação.";
fi